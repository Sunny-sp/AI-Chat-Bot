import React, { useState, useEffect } from 'react';

const App = () => {
  const [prompt, setPrompt] = useState('');
  const [loading, setLoading] = useState(false);
  const [chatHistory, setChatHistory] = useState([]);
  const [eventSource, setEventSource] = useState(null);
  const [currentLine, setCurrentLine] = useState('');

  useEffect(() => {
    return () => {
      if (eventSource) {
        eventSource.close();
      }
    };
  }, [eventSource]);

  const handleInputChange = (e) => {
    setPrompt(e.target.value);
  };

  const formatResponseText = (text) => {
    return text.split('\n').map((line, index) => (
      <React.Fragment key={index}>
        {line}
        <br />
      </React.Fragment>
    ));
  };

  const addQuestionToChat = (question) => {
    setChatHistory((prevChat) => [
      ...prevChat,
      { type: 'question', content: question },
    ]);
  };

  const addAnswerToChat = (answer) => {
    setChatHistory((prevChat) => [
      ...prevChat,
      { type: 'answer', content: answer },
    ]);
  };

  const handleFormSubmit = (e) => {
    e.preventDefault();

    // Return early if the prompt is empty
    if (!prompt.trim()) {
      return;
    }

    setLoading(true);

    if (eventSource) {
      eventSource.close();
    }

    setCurrentLine(''); // Clear current line
    setPrompt(''); // Clear input field

    addQuestionToChat(prompt);

    const newEventSource = new EventSource(
      `http://localhost:7860/?prompt=${encodeURIComponent(prompt)}`
    );

    newEventSource.onmessage = (event) => {
      const message = JSON.parse(event.data);
      const { token, completed } = message;

      if (completed) {
        newEventSource.close();
        setLoading(false);
        return;
      }

      setCurrentLine((prevLine) => prevLine + token);
    };

    newEventSource.onerror = (error) => {
      console.error('Error fetching data:', error);
      newEventSource.close();
      setLoading(false);
    };

    setEventSource(newEventSource);
  };

  const handleStopStream = () => {
    if (eventSource) {
      eventSource.close();
      setLoading(false);

      // If there is any remaining content in the current line, add it to the chat history
      if (currentLine.trim() !== '') {
        addAnswerToChat(currentLine);
      }

      setCurrentLine('');
    }
  };

  return (
    <div className="container py-4">
      <div className="p-4 overflow-y-auto">
        {chatHistory.map((chatItem, index) => (
          <div
            className={chatItem.type === 'question' ? 'user-question' : 'assistant-answer'}
            key={index}
          >
            {formatResponseText(chatItem.content)}
          </div>
        ))}
        {loading && currentLine && (
          <div className="assistant-answer">
            <pre>{currentLine}</pre>
          </div>
        )}
      </div>
      <form onSubmit={handleFormSubmit} className="mb-4">
        <input
          type="text"
          value={prompt}
          onChange={handleInputChange}
          className="form-control"
        />
        <button type="submit" className="btn btn-primary" disabled={loading}> {/* Disable button while loading */}
          Send
        </button>
        <button type="button" onClick={handleStopStream} className="btn btn-danger">
          Stop
        </button>
      </form>
      {loading && <div>Loading...</div>}
    </div>
  );
};

export default App;
