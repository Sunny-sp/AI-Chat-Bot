import React, { useState, useEffect } from 'react';
import user from './assets/user.png';
import chatbot from './assets/chatbot.png';

const App = () => {
  const [prompt, setPrompt] = useState('');
  const [loading, setLoading] = useState(false);
  const [chatHistory, setChatHistory] = useState([]);
  const [eventSource, setEventSource] = useState(null);
  const [currentLine, setCurrentLine] = useState('');

  useEffect(() => {
    return () => {
      if (eventSource) {
        eventSource.close();
      }
    };
  }, [eventSource]);

  const handleInputChange = (e) => {
    setPrompt(e.target.value);
  };

  const addQuestionToChat = (question) => {
    setChatHistory((prevChat) => [
      ...prevChat,
      { type: 'question', content: question },
    ]);
  };

  const addAnswerToChat = (answer) => {
    setChatHistory((prevChat) => [
      ...prevChat,
      { type: 'answer', content: answer },
    ]);
  };

  const handleFormSubmit = (e) => {
    e.preventDefault();

    // Return early if the prompt is empty
    if (!prompt.trim()) {
      return;
    }

    setLoading(true);

    if (eventSource) {
      eventSource.close();
    }

    setCurrentLine(''); // Clear current line
    setPrompt(''); // Clear input field

    addQuestionToChat(prompt);

    const newEventSource = new EventSource(
      `http://localhost:7860/?prompt=${encodeURIComponent(prompt)}`
    );

    newEventSource.onmessage = (event) => {
      const message = JSON.parse(event.data);
      const { token, completed } = message;

      if (completed) {
        newEventSource.close();
        setLoading(false);
        return;
      }

      setCurrentLine((prevLine) => prevLine + token);
    };

    newEventSource.onerror = (error) => {
      console.error('Error fetching data:', error);
      newEventSource.close();
      setLoading(false);
    };

    setEventSource(newEventSource);
  };

  const handleStopStream = () => {
    if (eventSource) {
      eventSource.close();
      setLoading(false);

      // If there is any remaining content in the current line, add it to the chat history
      if (currentLine.trim() !== '') {
        addAnswerToChat(currentLine);
      }

      setCurrentLine('');
    }
  };

  const formatResponseText = (text) => {
    return text.split('\n').map((line, index) => (
      <React.Fragment key={index}>
        {line}
        <br />
      </React.Fragment>
    ));
  };

  return (
    <div style={{ background: '#f0f0f0', minHeight: '100vh', position: 'relative' }}>
      <div className="container py-4" style={{ marginLeft: '10%', marginRight: '10%', paddingBottom: '100px' }}>
        <div className="p-4 overflow-y-auto" style={{ marginBottom: '60px' }}>
          {chatHistory.map((chatItem, index) => (
            <div
              key={index}
              className={
                chatItem.type === 'question'
                  ? 'card user-question my-2'
                  : 'card bg-light assistant-answer my-2'
              }
              style={{ marginBottom: '10px' }}
            >
              <div className="card-body">
                <div className="media" style={{ display: 'flex', alignItems: 'flex-start' }}>
                  <div style={{ marginRight: '15px' }}>
                    <img
                      style={{ maxWidth: "20px", maxHeight: "20px" }}
                      src={chatItem.type === 'question' ? user : chatbot}
                      alt={chatItem.type === 'question' ? 'User' : 'Chatbot'}
                      className="avatar"
                    />
                  </div>
                  <div className="media-body" style={{ maxWidth: 'calc(75% - 20px)' }}>
                    <div>
                      {formatResponseText(chatItem.content)}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
  
          {loading && currentLine && (
            <div className="card bg-light assistant-answer my-2" style={{ marginBottom: '10px' }}>{/* Add this line to add spacing */}
              <div className="card-body">
                <div className="media" style={{ display: 'flex', alignItems: 'flex-start' }}>
                  <div style={{ marginRight: '15px' }}>
                    <img
                      style={{ maxWidth: "20px", maxHeight: "20px" }}
                      src={chatbot}
                      alt="Chatbot"
                      className="avatar"
                    />
                  </div>
                  <div className="media-body" style={{ maxWidth: 'calc(75% - 20px)' }}>
                    {formatResponseText(currentLine)}
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
  
        <form onSubmit={handleFormSubmit} className="mb-4" style={{ position: 'fixed', bottom: '60px', left: '10%', right: '10%' }}>
          <input
            type="text"
            value={prompt}
            onChange={handleInputChange}
            className="form-control"
          />
          <button type="submit" className="btn btn-primary" disabled={loading}>
            Send
          </button>
          <button type="button" onClick={handleStopStream} className="btn btn-danger">
            Stop
          </button>
        </form>
      </div>
    </div>
  );

};

export default App;
